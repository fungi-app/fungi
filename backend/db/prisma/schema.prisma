// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = "postgresql://postgres:postgres$259216@localhost:5432/fungi"
}

enum EatableGrade {
  NOT_EATABLE
  PARTIALLY_EATABLE
  EATABLE
}

enum COLOR {
  RED
  GREY
  WHITE
  BLACK
  BROWN
}

enum HYMENOPHORE {
  SMOOTH // Гладкая
  SPIKY // Шипастая
  TUBULAR // Трубчатая
  LABYRINTHINE // Лабиринтовидная
  LAMELLAR // Пластинчатый
}

enum FOOT_TYPE {
  THICK_AT_TOP // Утолщенная вверху
  THICK_AT_BOTTOM
  WITH_SKIRT // С юбкой
  SMOOTH // Ровная
  THICK_AT_MIDDLE
}

enum HEAD_TYPE {
  CONVEX // Выпуклая 
  CONCAVE // Вогнутая
  SMOOTH // Ровная
}

model Mushroom {
  id Int @id @default(autoincrement())

  name String

  latinName   String
  redBooked   Boolean
  eatable     EatableGrade
  description String

  synonymousNames String[]
  have_foot       Boolean
  foot_color      COLOR[]
  foot_size_from  Int
  foot_size_to    Int
  foot_type       FOOT_TYPE
  head_type       HEAD_TYPE

  head_color  COLOR[]
  hymenophore HYMENOPHORE

  childDoubles  Mushroom[] @relation("MushroomDoubles")
  parentDoubles Mushroom[] @relation("MushroomDoubles")

  addedAt DateTime @default(now())
  images  Image[]

  family   Family @relation(fields: [familyId], references: [id])
  familyId Int
}

model Family {
  id        Int    @id @default(autoincrement())
  name      String
  latinName String

  mushrooms Mushroom[]
}

enum UserRole {
  USER
  EDITOR
  MODERATOR
  ADMIN
}

model User {
  cuid String @id @default(cuid())

  name         String
  username     String   @unique
  email        String   @unique
  role         UserRole
  registeredAt DateTime @default(now())
  lastOnline   DateTime @default(now())

  passwordHash String
  passwordSalt String

  sessions     Session[]
  publications Publication[]
}

enum SessionType {
  APP
  WEBSITE
}

model Session {
  id         String      @id @default(cuid())
  from       SessionType
  firstIp    String
  firstLogin DateTime    @default(now())
  token      String      @unique

  user     User   @relation(fields: [userCuid], references: [cuid])
  userCuid String
}

model Publication {
  id         String @id @default(cuid())
  title      String
  author     User   @relation(fields: [authorCuid], references: [cuid])
  content    String
  authorCuid String

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String?

  addedAt DateTime @default(now())
}

model Image {
  id     String  @id @default(cuid())
  ext    String
  bucket String
  name   String?
  source String?

  mushrooms    Mushroom[]
  publications Publication[]

  uploadedAt DateTime @default(now())
}
